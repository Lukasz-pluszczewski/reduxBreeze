{"version":3,"file":"reduxBreeze.mjs","sources":["../src/tools/chainReducers.js","../src/tools/checkConflicts.js","../src/tools/connect.js","../src/tools/createActionType.js","../src/tools/mergePlugins.js","../src/defaultPlugin.js","../src/reduxBreeze.js","../src/index.js"],"sourcesContent":["import _ from 'lodash';\n\n/**\n * Helper for redux to attach reducers to one field instead of composing them into separate fields\n * @param {array} rawReducers array of unchained, not combined reducers\n * @return {function} reducer\n */\nconst chainReducers = rawReducers => (state, action) => {\n  const reducers = _.filter(rawReducers, reducer => {\n    if (_.isNil(reducer)) {\n      return false;\n    }\n    if (_.isFunction(reducer)) {\n      return true;\n    }\n    throw new Error('reducers passed to chain reducers must be either a valida reducer (function) or nil (null or undefined)');\n  });\n  return reducers.reduce((accuState, reducer) => reducer(accuState, action), state);\n};\n\nexport default chainReducers;\n","import _ from 'lodash';\n\n/**\n * Checks if there are conflicts in plugins in given adapterType (conflict = two plugins handling same actionType)\n * @param {array} plugins list of plugins\n * @param {string} adapterType name of the adapter type: 'actionAdapter', 'reducerAdapter', 'initialStateAdapter'\n * @param {function(actionType: string, pluginName: string, adapterType: string)} map function that changes actionTypes to a new values\n * @return {string} error text or empty string if no conflicts found\n */\nconst checkConflicts = (plugins, adapterType, map = actionType => actionType) => {\n  const foundAdapters = {};\n  plugins.forEach(plugin => {\n    if (plugin[adapterType]) {\n      _.forEach(plugin[adapterType], (adapter, actionType) => {\n        const mappedActionType = map(actionType, plugin.name, adapterType);\n        if (!foundAdapters[mappedActionType]) {\n          foundAdapters[mappedActionType] = [];\n        }\n        foundAdapters[mappedActionType].push(plugin.name);\n      });\n    }\n  });\n  return _(foundAdapters)\n    .map((listOfPlugins, actionType) => listOfPlugins.length > 1 ? `${adapterType} '${actionType}' is defined in plugins: ${listOfPlugins.join(',')}` : null)\n    .filter()\n    .join('; ');\n};\n\nexport default checkConflicts;\n","import _ from 'lodash';\nimport { connect as reduxConnect } from 'react-redux';\n\n// see `_stringToPath.js` file in lodash repository\nconst pathPartReg = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nconst backslashReg = /\\\\(\\\\)?/g;\n\n/**\n * Function similar to lodash's pathToString implementation, converting string path to array\n * @param {string} path to be converted to array\n * @return {Array} path\n */\nconst stringToPath = path => {\n  const result = [];\n  path.replace(pathPartReg, function(match, number, quote, string) {\n    if (quote) {\n      result.push(string.replace(backslashReg, '$1'));\n    } else {\n      result.push(number ? parseInt(number) : match);\n    }\n  });\n  return result;\n};\n\n/**\n *\n * @param {object|array} target object or array we'll get value from\n * @param {string|array} field in target we'll get requested value from\n * @param {boolean} throwError flag indicating if \"cannot read property of undefined\" error should be thrown\n * @param {any} defaultValue value that should be assigned if path has not been found in the object (ignored when throwError = true)\n * @return {any} requested value\n */\nconst getValue = (target, field, throwError, defaultValue) => {\n  if (throwError) {\n    return target[field];\n  }\n  return _.isNil(target) ? defaultValue : target[field];\n};\n\n/**\n * Function similar to lodash's get but it can throw an error when path has not been found\n * @param {object|array} target object or array we'll get value from\n * @param {string|array} path in target we'll get requested value from\n * @param {boolean} throwError flag indicating if \"cannot read property of undefined\" error should be thrown\n * @param {any} defaultValue value that should be assigned if path has not been found in the object (ignored when throwError = true)\n * @return {any} requested value\n */\nconst get = (target, path, throwError, defaultValue) => {\n  if (!_.isArray(path) && !_.isPlainObject(path) && !_.isString(path)) {\n    throw new Error(`Path passed to get function must be a string, array of strings and numbers or plain object but it's type is ${typeof path}`);\n  }\n\n  let pathSplit = path;\n  if (!_.isArray(path)) {\n    pathSplit = stringToPath(path);\n  }\n  if (pathSplit.length === 1) {\n    return getValue(target, pathSplit[0], throwError, defaultValue);\n  }\n  return get(getValue(target, pathSplit[0]), _.tail(pathSplit), throwError, defaultValue);\n};\n\n/**\n * Function returning value based on path and state\n * @param {string|number} key prop name (to be used in error)\n * @param {object} state\n * @param {string} path path in object\n * @param {boolean} throwError flag indicating if \"cannot read property of undefined\" error should be thrown\n * @param {any} defaultValue value that should be assigned if path has not been found in the object (ignored when throwError = true)\n * @return {any} requested value\n */\nconst getValueForMapStateToProps = (key, state, path, throwError, defaultValue) => {\n  if (_.isString(path)) {\n    return get(state, path.replace(/^state\\./, ''), throwError, defaultValue);\n  }\n  if (_.isFunction(path)) {\n    return path(state);\n  }\n  throw new Error(`When using plain object in \"connect\", values must be either strings (paths to values in state) or functions (selectors). Check value in ${key} field`);\n};\n\n/**\n * Converts object of paths to traditional mapStateToProps function, exported for testing purposes\n * @param {object|function} mapState object of paths or traditional mapStateToProps function\n * @return {function} mapStateToProps function\n */\nexport const getNewMapState = mapState => {\n  if (_.isPlainObject(mapState)) {\n    return state => _.mapValues(mapState, (value, key) => {\n      if (Array.isArray(value)) {\n        return getValueForMapStateToProps(key, state, value[0], false, value[1]);\n      }\n      return getValueForMapStateToProps(key, state, value, true);\n    });\n  }\n  return mapState;\n};\n\n/**\n * Works like react-redux connect but allows you to use object of paths as first argument\n * @param {object|function} mapState objects of paths or traditional mapStateToProps function\n * @param {array} rest rest of connect arguments\n * @return {function} connect HOC\n */\nconst connect = (mapState, ...rest) => reduxConnect(getNewMapState(mapState), ...rest);\n\nexport default connect;\n","import _ from 'lodash';\n\n/**\n *\n * @param {string} actionName camelCase name of the action (e.g. someAction)\n * @param {string} suffix string that is going to be added at the end of the created action type\n * @param {string} prefix string that is going to be added at the beginning of the created action type\n * @return {string} upperSnakeCase action type (e.g. SOME_ACTION or with example suffix SOME_ACTION_SUFFIX)\n */\nconst createActionType = (actionName, suffix = '', prefix = '') => {\n  const upperSnakeCase = _.snakeCase(actionName).toUpperCase();\n  return `${prefix ? `${prefix.toUpperCase()}_` : ''}${upperSnakeCase}${suffix ? `_${suffix.toUpperCase()}` : ''}`;\n};\n\nexport default createActionType;\n","import _ from 'lodash';\nimport checkConflicts from './checkConflicts';\n\n/**\n * Function to merge different plugins into one plugin object\n * @param {array} plugins array of plugins objects\n * @param {boolean} strict with strict turned on we throw an error on plugin conflicts\n * @param {function} mapActionTypes function that changes names of action types\n * @return {{actionAdapter, reducerAdapter, initialStateAdapter}} merged plugin object\n */\nconst mergePlugins = (plugins, { strict = true, mapActionTypes = actionType => actionType } = {}) => {\n  const actionAdapterConflicts = checkConflicts(plugins, 'actionAdapter', mapActionTypes);\n  const reducerAdapterConflicts = checkConflicts(plugins, 'reducerAdapter', mapActionTypes);\n  const initialStateAdapterConflicts = checkConflicts(plugins, 'initialStateAdapter', mapActionTypes);\n  const conflicts = [];\n  const conflictsVerbose = [];\n  if (actionAdapterConflicts) {\n    conflicts.push('actionAdapters');\n    conflictsVerbose.push(actionAdapterConflicts);\n  }\n  if (reducerAdapterConflicts) {\n    conflicts.push('reducerAdapters');\n    conflictsVerbose.push(reducerAdapterConflicts);\n  }\n  if (initialStateAdapterConflicts) {\n    conflicts.push('initialStateAdapters');\n    conflictsVerbose.push(initialStateAdapterConflicts);\n  }\n\n  if (conflicts.length) {\n    const errorMessage = `Conflicts in adapters: ${conflicts.join(', ')}. ${conflictsVerbose.join('. ')}.`;\n    if (strict) {\n      throw new Error(errorMessage);\n    }\n    console.warn(`${errorMessage} Duplicated adapters will be overwritten!`); // eslint-disable-line no-console\n  }\n\n  return {\n    actionAdapter: plugins.reduce((actionAdapter, plugin) => ({\n      ...actionAdapter,\n      ..._.reduce(plugin.actionAdapter, (accu, actionAdapter, actionType) => {\n        accu[mapActionTypes(actionType, plugin.name, 'actionAdapter')] = actionAdapter;\n        return accu;\n      }, {}),\n    }), {}),\n    reducerAdapter: plugins.reduce((actionAdapter, plugin) => ({\n      ...actionAdapter,\n      ..._.reduce(plugin.reducerAdapter, (accu, reducerAdapter, actionType) => {\n        accu[mapActionTypes(actionType, plugin.name, 'reducerAdapter')] = reducerAdapter;\n        return accu;\n      }, {}),\n    }), {}),\n    initialStateAdapter: plugins.reduce((actionAdapter, plugin) => ({\n      ...actionAdapter,\n      ..._.reduce(plugin.initialStateAdapter, (accu, initialStateAdapter, actionType) => {\n        accu[mapActionTypes(actionType, plugin.name, 'initialStateAdapter')] = initialStateAdapter;\n        return accu;\n      }, {}),\n    }), {}),\n  };\n};\n\nexport default mergePlugins;\n","import _ from 'lodash';\nimport { set } from 'perfect-immutable';\n\nconst getResultsAssignments = (actionDefinition, actionName, action = {}, state = {}) => {\n  const result = _.isFunction(actionDefinition.result) ? actionDefinition.result(action) : actionDefinition.result;\n  return _.reduce(result, (accu, source, target) => {\n    if (_.isFunction(source)) {\n      accu[target] = source(action, _.get(state, target));\n    } else if (_.isPlainObject(source)) {\n      if (_.isFunction(source.source)) {\n        accu[target] = source.source(action, _.get(state, target));\n      } else if (_.has(source, 'default') && !_.has(action, source.source)) {\n        accu[target] = source.default;\n      } else {\n        accu[target] = _.get(action, source.source);\n      }\n    } else {\n      accu[target] = _.get(action, source);\n    }\n    return accu;\n  }, {});\n};\n\nconst getInitialStateAssignments = actionDefinition => {\n  const result = _.isFunction(actionDefinition.result) ? actionDefinition.result({}) : actionDefinition.result;\n  return _.reduce(result, (accu, source, target) => {\n    if (_.isPlainObject(source) && _.has(source, 'initial')) {\n      accu[target] = source.initial;\n    } else {\n      accu[target] = null;\n    }\n    return accu;\n  }, {});\n};\n\n\nconst createDefaultPlugin = ({ createActionType }, config) => ({\n  name: 'redux-breeze-plugin-default',\n\n  /**\n   * Object of functions that gets `actionDefinition` and `actionName` as arguments and return action creator\n   */\n  actionAdapter: {\n    default(actionDefinition, actionName) {\n      return params => ({\n        type: createActionType(actionName),\n        payload: params,\n      });\n    },\n  },\n\n  /**\n   * Object of functions that gets `actionDefinition`, `actionName`, and `initialState` and returns a reducer\n   */\n  reducerAdapter: {\n    default(actionDefinition, actionName, initialState) {\n      return (state = initialState, action) => {\n        if (action.type === createActionType(actionName)) {\n          return set(state, getResultsAssignments(actionDefinition, actionName, action, state));\n        }\n        return state;\n      };\n    },\n  },\n\n  /**\n   * Object of functions that gets `actionDefinition` and `actionName` as arguments and return assignment object (with keys = paths, values = values to be saved in those paths)\n   */\n  initialStateAdapter: {\n    default(actionDefinition, actionName) {\n      return getInitialStateAssignments(actionDefinition, actionName);\n    },\n  },\n});\n\nexport default createDefaultPlugin;\n","import _ from 'lodash';\nimport { combineReducers } from 'redux';\nimport { set } from 'perfect-immutable';\nimport { defaultPlugin, tools, mergePlugins, chainReducers } from './index';\n\nconst defaultConfig = {\n  useDefaultPlugin: true,\n  strict: true,\n  /**\n   *\n   * @param {string} actionType action type name (like 'default' in default plugin)\n   * @param {string} pluginName name of the plugin\n   * @param {string} adapterType type of adapter: 'actionAdapter', 'reducerAdapter', 'initialStateAdapter'\n   * @return {string} changed actionType\n   */\n  mapActionTypes(actionType, pluginName, adapterType) {\n    return actionType;\n  },\n};\n\nconst createReduxBreezeInstance = (actionDefinitions, userConfig = defaultConfig, ...plugins) => {\n  const config = {\n    ...defaultConfig,\n    ...userConfig,\n  };\n\n  // merging plugins\n  const pluginsToMerge = config.useDefaultPlugin\n    ? [defaultPlugin(tools), ...plugins.map(plugin => plugin(tools, config))]\n    : plugins.map(plugin => plugin(tools, config));\n\n  const plugin = mergePlugins(\n    pluginsToMerge,\n    {\n      strict: config.strict,\n      mapActionTypes: config.mapActionTypes,\n    }\n  );\n\n  /**\n   * Function to generate initialState (and immutably deeply merge it with custom initialState) from actions definitions\n   * @param {object} actions object of action definitions\n   * @param {object} initialState optional custom initial state\n   * @return {object} created initial state (merged with provided initialState)\n   */\n  const createInitialState = (actions, initialState = {}) => _.reduce(\n    actions,\n    (actionsState, actionDefinition, actionName) => {\n      if (plugin.initialStateAdapter[actionDefinition.type]) {\n        return set(\n          actionsState,\n          plugin.initialStateAdapter[actionDefinition.type](actionDefinition, actionName)\n        );\n      }\n      return actionsState;\n    },\n    initialState\n  );\n\n  return {\n    combineReducers(customReducers = {}) {\n      const reducers = _.reduce(actionDefinitions, (reducers, actions, reducerName) => {\n        // getting final initial state for this combined/chained reducer (triggering custom reducers to get their initial state)\n        const initialState = createInitialState(\n          actions,\n          reducers[reducerName] ? reducers[reducerName](undefined, {}) : {} // eslint-disable-line  no-undefined\n        );\n\n        // creating array of reducers tha are going to be chained on the `reducerName` field\n        const reducersToChain = _.map(actions, (actionDefinition, actionName) => {\n          if (plugin.reducerAdapter[actionDefinition.type]) {\n            return plugin.reducerAdapter[actionDefinition.type](actionDefinition, actionName, initialState);\n          }\n          throw new Error(`Unknown type '${actionDefinition.type}' of action '${actionName}'. It's most likely because you did not install plugin to handle reducer for this type of actions`);\n        });\n\n        // adding custom reducer (if one has been provided) at the end of the chain for the user to be able to modify default behaviour\n        if (reducers[reducerName]) {\n          reducersToChain.push(reducers[reducerName]);\n        }\n\n        reducers[reducerName] = chainReducers(reducersToChain);\n        return reducers;\n      }, customReducers);\n      return combineReducers(reducers);\n    },\n    getAction(actionName, config) {\n      const actionGroup = _.find(actionDefinitions, actionsList => _.has(actionsList, actionName));\n      if (!actionGroup) {\n        throw new Error(`${actionName} action has not been found`);\n      }\n      if (!plugin.actionAdapter[actionGroup[actionName].type]) {\n        throw new Error(`Unknown type '${actionGroup[actionName].type}' of '${actionName}' action. It's most likely because you did not install plugin to handle action creation for this type of actions`);\n      }\n      return plugin.actionAdapter[actionGroup[actionName].type](actionGroup[actionName], actionName, config);\n    },\n    getActionDefinitions() {\n      return actionDefinitions;\n    },\n    getMergedPlugin() {\n      return plugin;\n    },\n  };\n};\n\nexport default createReduxBreezeInstance;\n","import chainReducers from './tools/chainReducers';\nimport checkConflicts from './tools/checkConflicts';\nimport connect from './tools/connect';\nimport createActionType from './tools/createActionType';\nimport mergePlugins from './tools/mergePlugins';\n\nimport defaultPlugin from './defaultPlugin';\nimport createReduxBreezeInstance from './reduxBreeze';\n\nexport {\n  chainReducers,\n  checkConflicts,\n  connect,\n  createActionType,\n  mergePlugins,\n  defaultPlugin,\n};\n\n// still exported for backwards compatibility and testing purposes\nexport const tools = {\n  chainReducers,\n  checkConflicts,\n  connect,\n  createActionType,\n  mergePlugins,\n};\n\nexport default createReduxBreezeInstance;\n"],"names":["chainReducers","state","action","reducers","_","filter","rawReducers","isNil","reducer","isFunction","Error","reduce","accuState","checkConflicts","plugins","adapterType","map","actionType","foundAdapters","forEach","plugin","adapter","mappedActionType","name","push","listOfPlugins","length","join","pathPartReg","backslashReg","stringToPath","result","replace","match","number","quote","string","parseInt","getValue","target","field","throwError","defaultValue","get","path","isArray","isPlainObject","isString","pathSplit","tail","getValueForMapStateToProps","key","getNewMapState","mapState","mapValues","value","Array","connect","rest","reduxConnect","createActionType","actionName","suffix","prefix","upperSnakeCase","snakeCase","toUpperCase","mergePlugins","strict","mapActionTypes","actionAdapterConflicts","reducerAdapterConflicts","initialStateAdapterConflicts","conflicts","conflictsVerbose","errorMessage","warn","actionAdapter","accu","reducerAdapter","initialStateAdapter","getResultsAssignments","actionDefinition","source","has","default","getInitialStateAssignments","initial","createDefaultPlugin","config","params","initialState","type","set","defaultConfig","pluginName","createReduxBreezeInstance","actionDefinitions","userConfig","pluginsToMerge","useDefaultPlugin","defaultPlugin","tools","createInitialState","actions","actionsState","customReducers","reducerName","undefined","reducersToChain","combineReducers","actionGroup","find","actionsList"],"mappings":"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"}
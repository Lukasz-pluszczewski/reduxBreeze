{"version":3,"file":"reduxBreeze.mjs","sources":["../src/tools.js","../src/defaultPlugin.js","../src/index.js"],"sourcesContent":["import _ from 'lodash';\n\n/**\n * Helper for redux to attach reducers to one field instead of composing them into separate fields\n * @param {array} rawReducers array of unchained, not combined reducers\n * @return {function} reducer\n */\nexport const chainReducers = rawReducers => (state, action) => {\n  const reducers = _.filter(rawReducers, reducer => {\n    if (_.isNil(reducer)) {\n      return false;\n    }\n    if (_.isFunction(reducer)) {\n      return true;\n    }\n    throw new Error('reducers passed to chain reducers must be either a valida reducer (function) or nil (null or undefined)');\n  });\n  return reducers.reduce((accuState, reducer) => reducer(accuState, action), state);\n};\n\n/**\n * Checks if there are conflicts in plugins in given adapterType (conflict = two plugins handling same actionType)\n * @param {array} plugins list of plugins\n * @param {string} adapterType name of the adapter type: 'actionAdapter', 'reducerAdapter', 'initialStateAdapter'\n * @param {function(actionType: string, pluginName: string, adapterType: string)} map function that changes actionTypes to a new values\n * @return {string} error text or empty string if no conflicts found\n */\nexport const checkConflicts = (plugins, adapterType, map = actionType => actionType) => {\n  // TODO add checking for plugins having the same name\n  const foundAdapters = {};\n  plugins.forEach(plugin => {\n    if (plugin[adapterType]) {\n      _.forEach(plugin[adapterType], (adapter, actionType) => {\n        const mappedActionType = map(actionType, plugin.name, adapterType);\n        if (!foundAdapters[mappedActionType]) {\n          foundAdapters[mappedActionType] = [];\n        }\n        foundAdapters[mappedActionType].push(plugin.name);\n      });\n    }\n  });\n  return _(foundAdapters)\n    .map((listOfPlugins, actionType) => listOfPlugins.length > 1 ? `${adapterType} '${actionType}' is defined in plugins: ${listOfPlugins.join(',')}` : null)\n    .filter()\n    .join('; ');\n};\n\n/**\n * Function to merge different plugins into one plugin object\n * @param {array} plugins array of plugins objects\n * @param {boolean} strict with strict turned on we throw an error on plugin conflicts\n * @param {function} mapActionTypes function that changes names of action types\n * @return {{actionAdapter, reducerAdapter, initialStateAdapter}} merged plugin object\n */\nexport const mergePlugins = (plugins, { strict = true, mapActionTypes = actionType => actionType } = {}) => {\n  const actionAdapterConflicts = checkConflicts(plugins, 'actionAdapter', mapActionTypes);\n  const reducerAdapterConflicts = checkConflicts(plugins, 'reducerAdapter', mapActionTypes);\n  const initialStateAdapterConflicts = checkConflicts(plugins, 'initialStateAdapter', mapActionTypes);\n  const conflicts = [];\n  const conflictsVerbose = [];\n  if (actionAdapterConflicts) {\n    conflicts.push('actionAdapters');\n    conflictsVerbose.push(actionAdapterConflicts);\n  }\n  if (reducerAdapterConflicts) {\n    conflicts.push('reducerAdapters');\n    conflictsVerbose.push(reducerAdapterConflicts);\n  }\n  if (initialStateAdapterConflicts) {\n    conflicts.push('initialStateAdapters');\n    conflictsVerbose.push(initialStateAdapterConflicts);\n  }\n\n  if (conflicts.length) {\n    const errorMessage = `Conflicts in adapters: ${conflicts.join(', ')}. ${conflictsVerbose.join('. ')}.`;\n    if (strict) {\n      throw new Error(errorMessage);\n    }\n    console.warn(`${errorMessage} Duplicated adapters will be overwritten!`);\n  }\n\n  return {\n    actionAdapter: plugins.reduce((actionAdapter, plugin) => ({\n      ...actionAdapter,\n      ..._.reduce(plugin.actionAdapter, (accu, actionAdapter, actionType) => {\n        accu[mapActionTypes(actionType, plugin.name, 'actionAdapter')] = actionAdapter;\n        return accu;\n      }, {}),\n    }), {}),\n    reducerAdapter: plugins.reduce((actionAdapter, plugin) => ({\n      ...actionAdapter,\n      ..._.reduce(plugin.reducerAdapter, (accu, reducerAdapter, actionType) => {\n        accu[mapActionTypes(actionType, plugin.name, 'reducerAdapter')] = reducerAdapter;\n        return accu;\n      }, {}),\n    }), {}),\n    initialStateAdapter: plugins.reduce((actionAdapter, plugin) => ({\n      ...actionAdapter,\n      ..._.reduce(plugin.initialStateAdapter, (accu, initialStateAdapter, actionType) => {\n        accu[mapActionTypes(actionType, plugin.name, 'initialStateAdapter')] = initialStateAdapter;\n        return accu;\n      }, {}),\n    }), {}),\n\n  };\n};\n\n/**\n *\n * @param {string} actionName camelCase name of the action (e.g. someAction)\n * @param {string} suffix string that is going to be added at the end of the created action type\n * @param {string} prefix string that is going to be added at the beginning of the created action type\n * @return {string} upperSnakeCase action type (e.g. SOME_ACTION or with example suffix SOME_ACTION_SUFFIX)\n */\nexport const createActionType = (actionName, suffix = '', prefix = '') => {\n  const upperSnakeCase = _.snakeCase(actionName).toUpperCase();\n  return `${prefix ? `${prefix.toUpperCase()}_` : ''}${upperSnakeCase}${suffix ? `_${suffix.toUpperCase()}` : ''}`;\n};\n\n/**\n * Works like lodash _.set() but does not mutate object (doesn't work with array style keys like `someArray[2].anotherField`)\n * @param {object} object source object\n * @param {string|object} path in object to set value in or object with paths as keys and values as values (if path is an object it ignores 'value')\n * @param {any} value to set in given path\n * @param {string} delimiter path delimiter; by default: '.'\n * @return {object} new object with value(s) changed\n */\nexport const immutableSet = (object, path, value = null, delimiter = '.') => {\n  // console.log('immutableSet', {object, path, value, delimiter});\n  if (!path) {\n    return value;\n  }\n  if (_.isPlainObject(path)) {\n    if (_.isEmpty(path)) {\n      return object;\n    }\n    return _.reduce(path, (accu, value, path) => immutableSet(accu, path, value, delimiter), object);\n  }\n\n  const pathSplit = path.split(delimiter);\n  if (pathSplit.length === 1) {\n    return {\n      ...object,\n      [path]: value,\n    };\n  }\n  let childObject = {};\n  if (_.has(object, pathSplit[0])) {\n    childObject = object[pathSplit[0]];\n    if (!_.isPlainObject(childObject)) {\n      throw new Error(`Part of 'path' provided is defined in 'object' and is not a plain JS object but ${typeof childObject}. It's most likely an error. Check the path and object provided to immutableSet function`);\n    }\n  }\n  return {\n    ...object,\n    [pathSplit[0]]: immutableSet(childObject, _.tail(pathSplit).join(delimiter), value, delimiter),\n  };\n};\n\n/**\n * Copy value from fromPath in fromObject and create new object from toObject with that value saved in toPath\n * @param {object} fromObject object which you get the value from\n * @param {string} fromPath path in fromObject where you get tha value from\n * @param {object} toObject object where you save the value to\n * @param {string} toPath path in toObject where you save the value\n * @return {object} new object created from values in toObject\n */\nexport const immutablyCopyValue = (\n  fromObject,\n  fromPath,\n  toObject,\n  toPath\n) => immutableSet(toObject, toPath, _.get(fromObject, fromPath));\n","import _ from 'lodash';\n\nconst getResultsAssignments = (actionDefinition, actionName, action = {}, state = {}) => {\n  const result = _.isFunction(actionDefinition.result) ? actionDefinition.result(action) : actionDefinition.result;\n  return _.reduce(result, (accu, source, target) => {\n    if (_.isFunction(source)) {\n      accu[target] = source(action, _.get(state, target));\n    } else if (_.isPlainObject(source)) {\n      if (_.has(source, 'default') && !_.has(action, source.source)) {\n        accu[target] = source.default;\n      } else {\n        accu[target] = _.get(action, source.source);\n      }\n    } else {\n      accu[target] = _.get(action, source);\n    }\n    return accu;\n  }, {});\n};\n\nconst getInitialStateAssignments = actionDefinition => {\n  const result = _.isFunction(actionDefinition.result) ? actionDefinition.result({}) : actionDefinition.result;\n  return _.reduce(result, (accu, source, target) => {\n    if (_.isPlainObject(source) && _.has(source, 'initial')) {\n      accu[target] = source.initial;\n    } else {\n      accu[target] = null;\n    }\n    return accu;\n  }, {});\n};\n\n\nconst createDefaultPlugin = ({ createActionType, immutableSet }, config) => ({\n  name: 'redux-breeze-plugin-default',\n\n  /**\n   * Object of functions that gets `actionDefinition` and `actionName` as arguments and return action creator\n   */\n  actionAdapter: {\n    default(actionDefinition, actionName) {\n      return params => ({\n        type: createActionType(actionName),\n        payload: params,\n      });\n    },\n  },\n\n  /**\n   * Object of functions that gets `actionDefinition`, `actionName`, and `initialState` and returns a reducer\n   */\n  reducerAdapter: {\n    default(actionDefinition, actionName, initialState) {\n      return (state = initialState, action) => {\n        if (action.type === createActionType(actionName)) {\n          return immutableSet(state, getResultsAssignments(actionDefinition, actionName, action, state));\n        }\n        return state;\n      };\n    },\n  },\n\n  /**\n   * Object of functions that gets `actionDefinition` and `actionName` as arguments and return assignment object (with keys = paths, values = values to be saved in those paths)\n   */\n  initialStateAdapter: {\n    default(actionDefinition, actionName) {\n      return getInitialStateAssignments(actionDefinition, actionName);\n    },\n  },\n});\n\nexport default createDefaultPlugin;\n","import _ from 'lodash';\nimport { combineReducers } from 'redux';\nimport {\n  immutableSet,\n  createActionType,\n  chainReducers,\n  mergePlugins,\n  checkConflicts,\n  immutablyCopyValue,\n} from './tools';\nimport createDefaultPlugin from './defaultPlugin';\n\nconst defaultConfig = {\n  useDefaultPlugin: true,\n  strict: true,\n  /**\n   *\n   * @param {string} actionType action type name (like 'default' in default plugin)\n   * @param {string} pluginName name of the plugin\n   * @param {string} adapterType type of adapter: 'actionAdapter', 'reducerAdapter', 'initialStateAdapter'\n   * @return {string} changed actionType\n   */\n  mapActionTypes(actionType, pluginName, adapterType) {\n    return actionType;\n  },\n};\n\nexport const tools = {\n  immutableSet,\n  createActionType,\n  chainReducers,\n  mergePlugins,\n  checkConflicts,\n  immutablyCopyValue,\n};\n\nexport const defaultPlugin = createDefaultPlugin;\n\nconst createReduxBreezeInstance = (actionDefinitions, userConfig = defaultConfig, ...plugins) => {\n  const config = {\n    ...defaultConfig,\n    ...userConfig,\n  };\n\n  // merging plugins deeply\n  const pluginsToMerge = config.useDefaultPlugin\n    ? [createDefaultPlugin(tools), ...plugins.map(plugin => plugin(tools, config))]\n    : plugins.map(plugin => plugin(tools));\n\n  const plugin = mergePlugins(\n    pluginsToMerge,\n    {\n      strict: config.strict,\n      mapActionTypes: config.mapActionTypes,\n    }\n  );\n\n  /**\n   * Function to generate initialState (and immutably deeply merge it with custom initialState) from actions definitions\n   * @param {object} actions object of action definitions\n   * @param {object} initialState optional custom initial state\n   * @return {object} created initial state (merged with provided initialState)\n   */\n  const createInitialState = (actions, initialState = {}) => _.reduce(\n    actions,\n    (actionsState, actionDefinition, actionName) => {\n      if (plugin.initialStateAdapter[actionDefinition.type]) {\n        return immutableSet(\n          actionsState,\n          plugin.initialStateAdapter[actionDefinition.type](actionDefinition, actionName)\n        );\n      }\n      return actionsState;\n    },\n    initialState\n  );\n\n  return {\n    combineReducers(customReducers = {}) {\n      const reducers = _.reduce(actionDefinitions, (reducers, actions, reducerName) => {\n        // getting final initial state for this combined/chained reducer (triggering custom reducers to get their initial state)\n        const initialState = createInitialState(\n          actions,\n          reducers[reducerName] ? reducers[reducerName](undefined, {}) : {} // eslint-disable-line  no-undefined\n        );\n\n        // creating array of reducers tha are going to be chained on the `reducerName` field\n        const reducersToChain = _.map(actions, (actionDefinition, actionName) => {\n          if (plugin.reducerAdapter[actionDefinition.type]) {\n            return plugin.reducerAdapter[actionDefinition.type](actionDefinition, actionName, initialState);\n          }\n          throw new Error(`Unknown type '${actionDefinition.type}' of action '${actionName}'. It's most likely because you did not install plugin to handle reducer for this type of actions`);\n        });\n\n        // adding custom reducer (if one has been provided) at the end of the chain for the user to be able to modify default behaviour\n        if (reducers[reducerName]) {\n          reducersToChain.push(reducers[reducerName]);\n        }\n\n        reducers[reducerName] = chainReducers(reducersToChain);\n        return reducers;\n      }, customReducers);\n      return combineReducers(reducers);\n    },\n    getAction(actionName, config) {\n      const actionGroup = _.find(actionDefinitions, actionsList => _.has(actionsList, actionName));\n      if (!actionGroup) {\n        throw new Error(`${actionName} action has not been found`);\n      }\n      if (!plugin.actionAdapter[actionGroup[actionName].type]) {\n        throw new Error(`Unknown type '${actionGroup[actionName].type}' of '${actionName}' action. It's most likely because you did not install plugin to handle action creation for this type of actions`);\n      }\n      return plugin.actionAdapter[actionGroup[actionName].type](actionGroup[actionName], actionName, config);\n    },\n    getActionDefinitions() {\n      return actionDefinitions;\n    },\n    getMergedPlugin() {\n      return plugin;\n    },\n  };\n};\n\nexport default createReduxBreezeInstance;\n"],"names":["chainReducers","state","action","reducers","_","filter","rawReducers","isNil","reducer","isFunction","Error","reduce","accuState","checkConflicts","plugins","adapterType","map","actionType","foundAdapters","forEach","plugin","adapter","mappedActionType","name","push","listOfPlugins","length","join","mergePlugins","strict","mapActionTypes","actionAdapterConflicts","reducerAdapterConflicts","initialStateAdapterConflicts","conflicts","conflictsVerbose","errorMessage","warn","actionAdapter","accu","reducerAdapter","initialStateAdapter","createActionType","actionName","suffix","prefix","upperSnakeCase","snakeCase","toUpperCase","immutableSet","object","path","value","delimiter","isPlainObject","isEmpty","pathSplit","split","childObject","has","tail","immutablyCopyValue","fromObject","fromPath","toObject","toPath","get","getResultsAssignments","actionDefinition","result","source","target","default","getInitialStateAssignments","initial","createDefaultPlugin","config","params","initialState","type","defaultConfig","pluginName","tools","defaultPlugin","createReduxBreezeInstance","actionDefinitions","userConfig","pluginsToMerge","useDefaultPlugin","createInitialState","actions","actionsState","customReducers","reducerName","undefined","reducersToChain","combineReducers","actionGroup","find","actionsList"],"mappings":"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"}